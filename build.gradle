buildscript {
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/gradle-plugin'
        }
        maven {
            url 'https://maven.aliyun.com/repository/spring-plugin'
        }
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.7.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.9.RELEASE' apply false
    id 'org.asciidoctor.jvm.convert' version '2.4.0'
    id "org.asciidoctor.jvm.pdf" version "2.3.0"
    id 'de.undercouch.download' version '4.0.0'
}

ext{
    docsRoot = "http://docs.jcohy.com"
    springVersion = "5.2.6.RELEASE"
    springBootVersion = "2.2.7.RELEASE"
    springDataJpaVersion = "2.2.7.RELEASE"
    springDataRedisVersion = "2.2.7.RELEASE"
    springDataRestVersion = "3.2.7.RELEASE"
    springDataCommonsVersion = "2.2.5.RELEASE"
    springSecurityVersion = "5.2.4.RELEASE"
    springHateoasVersion = "1.0.5.RELEASE"
    springCloudVersion = "Hoxton SR3"
//    springIntegrationVersion = "5.2.4.RELEASE"
//    springWebservicesVersion = "3.0.9.RELEASE"
    springCloudAlibabaVersion = "2.2.1.RELEASE"
}

// 获取命令行参数，以指定不同的构建环境
if (!hasProperty("language")) ext.language = "zh-cn"

configure(allprojects) { project ->
    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        repositories {
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
            mavenCentral()
            maven { url "https://repo.spring.io/libs-spring-framework-build" }
            maven { url "https://repo.spring.io/snapshot" }
        }
    }
}


configure(subprojects) { subproject ->
    apply from: "${rootDir}/gradle/dependencies.gradle"
    apply plugin: "org.asciidoctor.jvm.convert"
    apply from: "${rootDir}/gradle/docs.gradle"
}

task docsZip(type: Zip) {
    group = "Distribution"
    description = "Builds -${archiveClassifier} archive containing api and reference " +
            "for deployment at http://docs.jcohy.com"

    archiveBaseName.set("jcohy")
    archiveClassifier.set("docs")

    from ("$buildDir/docs") {
        into "docs/"
    }
}
